// export const metadata = {
//   title: "PestPaw app",
//   description: "Generated by create next app",
// };
"use client";

import { usePathname } from "next/navigation";
import { useEffect, useState } from "react";

import { getAllBreeds } from "@/utils/api";
import AdditionalNav from "@/components/AdditionalNav/AdditionalNav";
import BackBtn from "@/components/BackBtn/BackBtn";
import SearchForm from "@/components/SearchForm/SearchForm";

import styles from "./layout.module.css";
import Paper from "@/components/Paper/Paper";

export default function PagesLayout({ children }) {
  const pathname = usePathname();
  console.log(`ðŸš€ ~ PagesLayout ~ pathname:`, pathname);

  const [breeds, setBreeds] = useState(null);
  const [query, setQuery] = useState("");
  const [breedIds, setBreedIds] = useState(null);
  const [limit, setLimit] = useState(null);

  useEffect(() => {
    async function loadBreeds() {
      const data = await getAllBreeds();
      setBreeds(data);
    }

    loadBreeds();
  }, []);

  useEffect(() => {
    function searchBreedIds(query) {
      if (!breeds) {
        return null;
      }

      const exactMatches = breeds.filter(
        (breed) => breed.name === query.toLowerCase()
      );
      const similarMatches = breeds.filter(
        (breed) =>
          breed.name.toLowerCase().includes(query.toLowerCase()) &&
          breed.name !== query.toLowerCase()
      );

      const sortedResults = exactMatches.concat(similarMatches);
      const sortedIds = sortedResults.map((el) => el.id).join();

      setBreedIds(sortedIds);
      setLimit(sortedResults.length);
    }

    searchBreedIds(query);
  }, [breeds, query]);

  function handleChange(e) {
    setQuery(e.currentTarget.value);
  }

  function handleSubmit(e) {
    e.preventDefault();

    if (query.trim() === "") {
      return;
    }
  }

  if (!breeds) {
    return null;
  }

  return (
    <section>
      <div className={styles.navWrapper}>
        <SearchForm handleSubmit={handleSubmit} handleChange={handleChange} />
        <AdditionalNav />
      </div>
      <Paper>
        <div className={styles.innerWrapper}>
          <BackBtn />
          {pathname.startsWith("/breeds/") ? (
            <>
              <h2 className={`${styles.title} ${styles.titleNotActive}`}>
                {pathname.slice(1, 7).toUpperCase()}
              </h2>
              <h2 className={styles.title}>
                {pathname.replace("/breeds/", "").toUpperCase()}
              </h2>
            </>
          ) : (
            <h2 className={styles.title}>
              {pathname.replace("/", "").toUpperCase()}
            </h2>
          )}
        </div>
        {children}
      </Paper>
    </section>
  );
}
